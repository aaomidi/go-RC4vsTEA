package main

import (
	"fmt"
	"time"

	"github.com/aaomidi/blockcipher"
	"github.com/aaomidi/blockcipher/ctr"
	"github.com/aaomidi/go-rc4/rc4"
	"github.com/aaomidi/go-tea/tea"
)

const (
	msg string = ""
)

func main() {
	handleRC4()
	handleTEA()
}

func handleRC4() {
	src := []byte(msg)

	start := time.Now().UnixNano()
	fmt.Printf("RC4 (start) - %s", getTime(start))
	c1 := rc4.NewCipher([]byte{0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F, 0x77})
	c2 := rc4.NewCipher([]byte{0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F, 0x77})

	// Get rid of 256 rounds
	c1.StepRounds(256)
	c2.StepRounds(256)

	encrypted := make([]byte, len(msg))
	decrypted := make([]byte, len(msg))

	c1.Apply(encrypted, src)
	c2.Apply(decrypted, encrypted)

	noop(string(decrypted))

	end := time.Now().UnixNano()
	fmt.Printf("RC4 (end) - %s", getTime(end))
	fmt.Printf("RC4 (difference) - %dns, %dms \n", end-start, (end-start)/int64(time.Millisecond))
}

func handleTEA() {
	data := []byte(msg)

	start := time.Now().UnixNano()
	fmt.Printf("TEA (start) - %s", getTime(start))
	k := tea.KeyFromBytes([]byte{0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F, 0x77})

	cipher := tea.Cipher{Key: k}

	method := ctr.CTR{
		IVIncrement:  ctr.IVIncrement(&cipher),
		CryptoMethod: blockcipher.CryptoMethod(&cipher),
	}

	src := tea.SliceChunk(data, 8)
	dst := make([][]byte, len(src))

	method.Apply(dst, src, []byte{2, 2, 2, 2, 2, 2, 2, 2})
	method.Apply(src, dst, []byte{2, 2, 2, 2, 2, 2, 2, 2})

	decryptedText := string(tea.JoinBytes(src))
	noop(decryptedText)

	end := time.Now().UnixNano()
	fmt.Printf("TEA (end) - %s", getTime(end))
	fmt.Printf("TEA (difference) - %dns, %dms \n", end-start, (end-start)/int64(time.Millisecond))
}

func getTime(t int64) string {
	return fmt.Sprintf("Time: %d\n", t)
}

func noop(i interface{}) {
	// Do nothing
}
